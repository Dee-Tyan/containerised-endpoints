const defaultEnvSource=(()=>"object"==typeof process?process.env:"undefined"==typeof Deno?{}:Deno.env.toObject())();function keyNotFound(a){throw new Error(`Required environment variable '${a}' not found.`)}function emptyString(a){throw new Error(`Required environment variable '${a}' is an empty string.`)}class Env{constructor(a=defaultEnvSource){this.source=a}get(a,b){return"undefined"!=typeof b&&(b+=""),a in this.source?this.source[a]:b}has(a){return a in this.source}first(a,b){if(!Array.isArray(a)||1>a.length)throw new TypeError("First argument must be an array of one or more strings.");for(const c of a)if(c in this.source)return this.source[c];return"undefined"!=typeof b&&(b+=""),b}require(a){const b=this.get(a);if("undefined"==typeof b)keyNotFound(a);else if(""===b)throw emptyString(a);else return b}requireFirst(a){const b=this.first(a);if("undefined"==typeof b)keyNotFound(`[${a}]`);else if(""===b)throw emptyString(`[${a}]`);else return b}get exists(){const a=new Proxy(this.source,{get(a,b){return b in a?a[b]:void keyNotFound(b)}});return Object.defineProperty(this,"exists",{value:a,writable:!1,enumerable:!1,configurable:!1}),a}get required(){const a=new Proxy(this.source,{get(a,b){return b in a?(""===a[b]&&emptyString(b),a[b]):void keyNotFound(b)}});return Object.defineProperty(this,"required",{value:a,writable:!1,enumerable:!1,configurable:!1}),a}}export{Env};
